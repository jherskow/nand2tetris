<class>
    <keyword> class </keyword>
    <identifier> GameControl </identifier>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Surface </identifier>
        <identifier> _surface </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Ball </identifier>
        <identifier> _ball </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> int </keyword>
        <identifier> _player </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Cannon </identifier>
        <identifier> _cannon1 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> Cannon </identifier>
        <identifier> _cannon2 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> int </keyword>
        <identifier> _cannon1Location </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> field </keyword>
        <keyword> int </keyword>
        <identifier> _cannon2Location </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> constructor </keyword>
        <identifier> GameControl </identifier>
        <identifier> new </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <keyword> this </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> init </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _surface </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Surface </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _player </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _surface </identifier>
                    <symbol> . </symbol>
                    <identifier> init </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> initCannons </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> int </keyword>
        <identifier> displayWelcomeScreen </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> key </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> pressed </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> key </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 5 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 22 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> *** City mayhem *** </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 7 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 16 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Press any key to start, or Q to quit </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> key </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> key </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Keyboard </identifier>
                                    <symbol> . </symbol>
                                    <identifier> keyPressed </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Utils </identifier>
                                    <symbol> . </symbol>
                                    <identifier> moduloPower2 </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> i </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <integerConstant> 256 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> pressed </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> key </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> key </identifier>
                                    </term>
                                    <symbol> = </symbol>
                                    <term>
                                        <integerConstant> 0 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> key </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Keyboard </identifier>
                                    <symbol> . </symbol>
                                    <identifier> keyPressed </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Utils </identifier>
                                    <symbol> . </symbol>
                                    <identifier> moduloPower2 </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> i </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <integerConstant> 256 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Utils </identifier>
                    <symbol> . </symbol>
                    <identifier> initRandomSeed </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> i </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 7 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 18 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <identifier> pressed </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> initCannons </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _cannon1Location </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Utils </identifier>
                            <symbol> . </symbol>
                            <identifier> random </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <integerConstant> 4 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _cannon2Location </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Utils </identifier>
                            <symbol> . </symbol>
                            <identifier> random </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <integerConstant> 4 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _cannon1 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Cannon </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _cannon2 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Cannon </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> calculateCannonLocations </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> calculateCannonLocations </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon1 </identifier>
                    <symbol> . </symbol>
                    <identifier> setX </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _surface </identifier>
                                <symbol> . </symbol>
                                <identifier> getCannonPosX </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon1Location </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon1 </identifier>
                    <symbol> . </symbol>
                    <identifier> setY </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _surface </identifier>
                                <symbol> . </symbol>
                                <identifier> getCannonPosY </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon1Location </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon2 </identifier>
                    <symbol> . </symbol>
                    <identifier> setX </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _surface </identifier>
                                <symbol> . </symbol>
                                <identifier> getCannonPosX </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon2Location </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon2 </identifier>
                    <symbol> . </symbol>
                    <identifier> setY </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _surface </identifier>
                                <symbol> . </symbol>
                                <identifier> getCannonPosY </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> , </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon2Location </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> drawCannons </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon1 </identifier>
                    <symbol> . </symbol>
                    <identifier> draw </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _cannon2 </identifier>
                    <symbol> . </symbol>
                    <identifier> draw </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> int </keyword>
        <identifier> getVertical </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 4 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <identifier> Keyboard </identifier>
                            <symbol> . </symbol>
                            <identifier> readInt </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant> Enter vertical power (0-100):  </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> int </keyword>
        <identifier> getHorizontal </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> power </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 5 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> power </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Keyboard </identifier>
                            <symbol> . </symbol>
                            <identifier> readInt </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant> Enter horizontal power (0-100):  </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <identifier> power </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> clearQuestions </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> false </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> drawRectangle </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> Surface </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getUpperDivider </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <integerConstant> 1 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 511 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> Surface </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getUpperDivider </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <integerConstant> 45 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> true </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> dispose </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _surface </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Memory </identifier>
                    <symbol> . </symbol>
                    <identifier> deAlloc </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> this </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> int </keyword>
        <identifier> checkWinner </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> _cannon1 </identifier>
                            <symbol> . </symbol>
                            <identifier> isDead </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <returnStatement>
                            <keyword> return </keyword>
                            <expression>
                                <term>
                                    <integerConstant> 2 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> _cannon2 </identifier>
                            <symbol> . </symbol>
                            <identifier> isDead </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <returnStatement>
                            <keyword> return </keyword>
                            <expression>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> int </keyword>
        <identifier> sendBall </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dirX </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dirY </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> wind </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> Ball </identifier>
                <identifier> ball </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> hit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> status </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> buildingHit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> d1 </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> d2 </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> ball </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Ball </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dirX </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dirY </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> wind </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> status </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> printState </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> hit </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> ball </identifier>
                            <symbol> . </symbol>
                            <identifier> draw </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Sys </identifier>
                            <symbol> . </symbol>
                            <identifier> wait </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <integerConstant> 50 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> ball </identifier>
                            <symbol> . </symbol>
                            <identifier> clear </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> ball </identifier>
                            <symbol> . </symbol>
                            <identifier> move </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> ball </identifier>
                            <symbol> . </symbol>
                            <identifier> affectByGravity </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> ball </identifier>
                            <symbol> . </symbol>
                            <identifier> affectByWind </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> hit </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> ball </identifier>
                                    <symbol> . </symbol>
                                    <identifier> isReachedEdge </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> buildingHit </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> _surface </identifier>
                                    <symbol> . </symbol>
                                    <identifier> isHitBuilding </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> ball </identifier>
                                                <symbol> . </symbol>
                                                <identifier> getX </identifier>
                                                <symbol> ( </symbol>
                                                <expressionList>
                                                </expressionList>
                                                <symbol> ) </symbol>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> ball </identifier>
                                                <symbol> . </symbol>
                                                <identifier> getY </identifier>
                                                <symbol> ( </symbol>
                                                <expressionList>
                                                </expressionList>
                                                <symbol> ) </symbol>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier> buildingHit </identifier>
                                            </term>
                                            <symbol> = </symbol>
                                            <term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <integerConstant> 1 </integerConstant>
                                                </term>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> hit </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <keyword> true </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> ball </identifier>
                    <symbol> . </symbol>
                    <identifier> drawExplosion </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> _surface </identifier>
                    <symbol> . </symbol>
                    <identifier> inflictBuildingsDemage </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> ball </identifier>
                                <symbol> . </symbol>
                                <identifier> getX </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <identifier> ball </identifier>
                                <symbol> . </symbol>
                                <identifier> getY </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 5 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> d1 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> _cannon1 </identifier>
                            <symbol> . </symbol>
                            <identifier> damageInflicted </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> ball </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getX </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> ball </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getY </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> _cannon2 </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getDamageRadius </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> d2 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> _cannon2 </identifier>
                            <symbol> . </symbol>
                            <identifier> damageInflicted </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> ball </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getX </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> ball </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getY </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> _cannon1 </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getDamageRadius </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> d1 </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> _player </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 2 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> status </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> status </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> d2 </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> _player </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> status </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> status </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 2 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> ball </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <identifier> status </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> clearStatusBox </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> false </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> drawRectangle </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 511 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> Surface </identifier>
                                        <symbol> . </symbol>
                                        <identifier> getUpperDivider </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <integerConstant> 1 </integerConstant>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> true </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> int </keyword>
        <identifier> otherPlayer </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> player </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> player </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <returnStatement>
                            <keyword> return </keyword>
                            <expression>
                                <term>
                                    <integerConstant> 2 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> printContinueMessage </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 3 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> End turn. Press any key to continue, 'Q' to quit </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> printPlayersLife </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Player 1:  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _cannon1 </identifier>
                                <symbol> . </symbol>
                                <identifier> getLife </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 40 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Player 2:  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> _cannon2 </identifier>
                                <symbol> . </symbol>
                                <identifier> getLife </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> printWind </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> wind </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 3 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Wind:  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> Math </identifier>
                                <symbol> . </symbol>
                                <identifier> abs </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <identifier> wind </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> wind </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  to the left </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> wind </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  to the right </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> displayVictoryMessage </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> player </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 10 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 23 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Player  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> player </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant>  wins!!! </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> printState </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> player </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> statusCode </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> clearStatusBox </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Status:  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant> FIRE! </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> printPlayersLife </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <returnStatement>
                            <keyword> return </keyword>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> Player  </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> player </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 2 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant> , it's your turn </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 3 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  wins the game! </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 4 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  missed </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 5 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  hit player  </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printInt </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> GameControl </identifier>
                                        <symbol> . </symbol>
                                        <identifier> otherPlayer </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                            <expression>
                                                <term>
                                                    <identifier> player </identifier>
                                                </term>
                                            </expression>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> statusCode </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 6 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Output </identifier>
                            <symbol> . </symbol>
                            <identifier> printString </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <stringConstant>  hit itself! </stringConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> printPlayersLife </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> start </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> exit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> pressed </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> exit </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <keyword> false </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <identifier> exit </identifier>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> pressed </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> displayWelcomeScreen </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> init </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> pressed </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 81 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> exit </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <keyword> true </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> run </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> run </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier> key </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> status </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> dirX </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> dirY </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> tempX </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> tempY </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> exit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> legal </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> winner </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> wind </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> exit </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <keyword> false </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <identifier> exit </identifier>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> legal </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <keyword> false </keyword>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> wind </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <integerConstant> 20 </integerConstant>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                            <identifier> Utils </identifier>
                                            <symbol> . </symbol>
                                            <identifier> random </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                                <expression>
                                                    <term>
                                                        <integerConstant> 40 </integerConstant>
                                                    </term>
                                                </expression>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> _surface </identifier>
                            <symbol> . </symbol>
                            <identifier> drawBottomAndTopLines </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> _surface </identifier>
                            <symbol> . </symbol>
                            <identifier> drawAllBuildings </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> calculateCannonLocations </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> drawCannons </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> printWind </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> wind </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> printState </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> _player </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 2 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <whileStatement>
                            <keyword> while </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <identifier> legal </identifier>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> dirX </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> getVertical </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> dirY </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> getHorizontal </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> legal </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> Utils </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> isBound </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                        <expression>
                                                            <term>
                                                                <identifier> dirX </identifier>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 0 </integerConstant>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 100 </integerConstant>
                                                            </term>
                                                        </expression>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                                <symbol> &amp; </symbol>
                                                <term>
                                                    <identifier> Utils </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> isBound </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                        <expression>
                                                            <term>
                                                                <identifier> dirY </identifier>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 0 </integerConstant>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 100 </integerConstant>
                                                            </term>
                                                        </expression>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                            </expression>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> GameControl </identifier>
                                    <symbol> . </symbol>
                                    <identifier> clearQuestions </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </whileStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> _player </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> tempX </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon1 </identifier>
                                            <symbol> . </symbol>
                                            <identifier> getX </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> tempY </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon1 </identifier>
                                            <symbol> . </symbol>
                                            <identifier> getY </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> dirX </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <symbol> - </symbol>
                                            <term>
                                                <identifier> dirX </identifier>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> tempX </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon2 </identifier>
                                            <symbol> . </symbol>
                                            <identifier> getX </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> tempY </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> _cannon2 </identifier>
                                            <symbol> . </symbol>
                                            <identifier> getY </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> status </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> sendBall </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> tempX </identifier>
                                            </term>
                                            <symbol> + </symbol>
                                            <term>
                                                <integerConstant> 4 </integerConstant>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> tempY </identifier>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <integerConstant> 6 </integerConstant>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> dirX </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> dirY </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> wind </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> printState </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> _player </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> status </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <integerConstant> 4 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> winner </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> checkWinner </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> winner </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> GameControl </identifier>
                                    <symbol> . </symbol>
                                    <identifier> printContinueMessage </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <whileStatement>
                                    <keyword> while </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> key </identifier>
                                        </term>
                                        <symbol> = </symbol>
                                        <term>
                                            <integerConstant> 0 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> key </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> Keyboard </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> keyPressed </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </whileStatement>
                                <ifStatement>
                                    <keyword> if </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> key </identifier>
                                        </term>
                                        <symbol> = </symbol>
                                        <term>
                                            <integerConstant> 81 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> exit </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <keyword> true </keyword>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </ifStatement>
                                <whileStatement>
                                    <keyword> while </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> key </identifier>
                                                    </term>
                                                    <symbol> = </symbol>
                                                    <term>
                                                        <integerConstant> 0 </integerConstant>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> key </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> Keyboard </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> keyPressed </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </whileStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> GameControl </identifier>
                                    <symbol> . </symbol>
                                    <identifier> clearQuestions </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Screen </identifier>
                                    <symbol> . </symbol>
                                    <identifier> clearScreen </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> _player </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> GameControl </identifier>
                                            <symbol> . </symbol>
                                            <identifier> otherPlayer </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                                <expression>
                                                    <term>
                                                        <identifier> _player </identifier>
                                                    </term>
                                                </expression>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> exit </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <keyword> true </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> displayVictoryMessage </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> winner </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Sys </identifier>
                                    <symbol> . </symbol>
                                    <identifier> wait </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <integerConstant> 5000 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
