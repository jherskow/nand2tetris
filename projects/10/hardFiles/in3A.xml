<class>
<keyword>class</keyword>
<identifier>in3</identifier>
<symbol>{</symbol>
<classVarDec>
<keyword>field</keyword>
<identifier>Cell</identifier>
<identifier>head</identifier>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<identifier>Cell</identifier>
<identifier>tail</identifier>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<identifier>Cell</identifier>
<identifier>food</identifier>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>constructor</keyword>
<identifier>in3</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>;</symbol>
</varDec>
<varDec>
<keyword>var</keyword>
<identifier>string</identifier>
<identifier>city</identifier>
<symbol>;</symbol>
</varDec>
<statements>
<letStatement>
<keyword>let</keyword>
<identifier>head</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Cell</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<integerConstant>150</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>100</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<keyword>null</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>tail</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>head</identifier>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<expression>
<term>
<symbol>-</symbol>
<term>
<integerConstant>40</integerConstant>
</term>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>~</symbol>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifier>tail</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Cell</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<integerConstant>100</integerConstant>
</term>
<symbol>+</symbol>
<term>
<identifier>i</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>100</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>tail</identifier>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol>-</symbol>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
<letStatement>
<keyword>let</keyword>
<identifier>food</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Cell</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<integerConstant>120</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>210</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<keyword>null</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>153</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifier>city</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>city</identifier>
</term>
<symbol>=</symbol>
<term>
<stringConstant>;letcity=</stringConstant>
</term>
</expression>
