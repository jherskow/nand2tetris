<class>
    <keyword> class </keyword>
    <identifier> try2 </identifier>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> field </keyword>
        <identifier> className </identifier>
        <identifier> c1 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <identifier> className </identifier>
        <identifier> c2 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> _d2 </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> doS </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <integerConstant> 5 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> doT </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <identifier> x1 </identifier>
                <symbol> , </symbol>
                <identifier> x2 </identifier>
                <symbol> , </symbol>
                <identifier> x3 </identifier>
                <symbol> , </symbol>
                <identifier> x4 </identifier>
                <symbol> , </symbol>
                <identifier> x5 </identifier>
                <symbol> , </symbol>
                <identifier> x6 </identifier>
                <symbol> , </symbol>
                <identifier> x7 </identifier>
                <symbol> , </symbol>
                <identifier> x8 </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x1 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> dddd // /* t </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x2 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  // /*  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x3 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  //  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x4 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  /*  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x5 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  */  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x6 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  /* */  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x7 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>   *//*//  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x8 </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  	 */	/*/	/ fff	hhl  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> underscore </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> _c </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> _c </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 7 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> checkDoS </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> f </identifier>
                <symbol> , </symbol>
                <identifier> offset </identifier>
                <symbol> , </symbol>
                <identifier> base </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> GGG </identifier>
                    <symbol> . </symbol>
                    <identifier> d </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> AAA </identifier>
                                <symbol> . </symbol>
                                <identifier> c </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <identifier> i </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <identifier> f </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> multiply </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> Math </identifier>
                                        <symbol> . </symbol>
                                        <identifier> abs </identifier>
                                        <symbol> ( </symbol>
                                        <expressionList>
                                            <expression>
                                                <term>
                                                    <identifier> i </identifier>
                                                </term>
                                            </expression>
                                        </expressionList>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> base </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <identifier> offset </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> checkDoLL </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> M </identifier>
                    <symbol> . </symbol>
                    <identifier> t </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> M </identifier>
                                <symbol> . </symbol>
                                <identifier> s </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                    <expression>
                                        <term>
                                            <identifier> i </identifier>
                                        </term>
                                    </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> method </keyword>
        <keyword> void </keyword>
        <identifier> checkvar </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> className </identifier>
                <identifier> c </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> checkStrSend </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <identifier> p </identifier>
                <symbol> , </symbol>
                <identifier> mess </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> p </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> fff </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> try2 </identifier>
                    <symbol> . </symbol>
                    <identifier> checkStr </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> ddd </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> try2 </identifier>
                    <symbol> . </symbol>
                    <identifier> checkStr </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> p </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> mess </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  |  Fruits dropped:  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> mess </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> ///t*/* </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> checkStr </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <identifier> String </identifier>
            <identifier> str </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> str </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> rrr </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> checkPrint </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <identifier> String </identifier>
            <identifier> str </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <stringConstant> W </stringConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> checkSpace </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <identifier> String </identifier>
            <identifier> str </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> j </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> j </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> int </keyword>
        <identifier> checkMinus </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> j </identifier>
                <symbol> , </symbol>
                <identifier> p </identifier>
                <symbol> , </symbol>
                <identifier> offset </identifier>
                <symbol> , </symbol>
                <identifier> base </identifier>
                <symbol> , </symbol>
                <identifier> t </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <identifier> j </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> j </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <identifier> j </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> j </identifier>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> j </identifier>
                                    </term>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> - </symbol>
                                            <term>
                                                <integerConstant> 1 </integerConstant>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 1 </integerConstant>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <identifier> j </identifier>
                                                </term>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <symbol> - </symbol>
                                                        <term>
                                                            <integerConstant> 1 </integerConstant>
                                                        </term>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> - </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <integerConstant> 1 </integerConstant>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <symbol> - </symbol>
                                                        <term>
                                                            <identifier> j </identifier>
                                                        </term>
                                                    </term>
                                                    <symbol> - </symbol>
                                                    <term>
                                                        <symbol> ( </symbol>
                                                        <expression>
                                                            <term>
                                                                <symbol> - </symbol>
                                                                <term>
                                                                    <integerConstant> 1 </integerConstant>
                                                                </term>
                                                            </term>
                                                        </expression>
                                                        <symbol> ) </symbol>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <identifier> p </identifier>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> - </symbol>
                                            <term>
                                                <integerConstant> 2 </integerConstant>
                                            </term>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                <term>
                                                    <symbol> - </symbol>
                                                    <term>
                                                        <integerConstant> 1 </integerConstant>
                                                    </term>
                                                </term>
                                            </expression>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> base </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <identifier> offset </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <identifier> j </identifier>
                            </term>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> checkNeg </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> j </identifier>
                <symbol> , </symbol>
                <identifier> p </identifier>
                <symbol> , </symbol>
                <identifier> offset </identifier>
                <symbol> , </symbol>
                <identifier> base </identifier>
                <symbol> , </symbol>
                <identifier> e </identifier>
                <symbol> , </symbol>
                <identifier> t </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> t </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> i </identifier>
                                                    </term>
                                                    <symbol> = </symbol>
                                                    <term>
                                                        <integerConstant> 113 </integerConstant>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> i </identifier>
                                                    </term>
                                                    <symbol> = </symbol>
                                                    <term>
                                                        <integerConstant> 81 </integerConstant>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> base </identifier>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> t </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> i </identifier>
                                                    </term>
                                                    <symbol> &lt; </symbol>
                                                    <term>
                                                        <identifier> j </identifier>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> e </identifier>
                                                    </term>
                                                    <symbol> = </symbol>
                                                    <term>
                                                        <identifier> i </identifier>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> t </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <identifier> base </identifier>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> &amp; </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
