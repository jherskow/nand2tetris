<class>
  <keyword> class </keyword>
  <identifier> Fly </identifier>
  <symbol> { </symbol>
<classVarDec>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
</classVarDec>
<classVarDec>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ; </symbol>
</classVarDec>
<subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Fly </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> location </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> location </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 141 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 123 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> location </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 100 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 200 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> location </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 29 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 34 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> location </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 350 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 156 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> location </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 5 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 230 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 67 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <keyword> this </keyword>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <keyword> true </keyword>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawCircle </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <integerConstant> 5 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <keyword> false </keyword>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawCircle </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <integerConstant> 5 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 10 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> x </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                          <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> , </symbol>      
        <expression>
              <term>
                          <identifier> y </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                          <integerConstant> 7 </integerConstant>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <keyword> this </keyword>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> x </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> y </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> y </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getX </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> loc </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 441 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 200 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 100 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 220 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 5 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 160 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getY </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> loc </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 200 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 145 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 120 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 4 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 200 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> loc </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 5 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 100 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>