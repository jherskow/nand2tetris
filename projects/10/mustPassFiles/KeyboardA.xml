<class>
  <keyword> class </keyword>
  <identifier> Keyboard </identifier>
  <symbol> { </symbol>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> KEYBOARD </identifier>
  <symbol> ; </symbol>
</classVarDec>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> MAX_STRING </identifier>
  <symbol> ; </symbol>
</classVarDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> init </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> KEYBOARD </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 24576 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> MAX_STRING </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 80 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> char </keyword>
    <identifier> keyPressed </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> key </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> key </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Memory </identifier>
                        <symbol> . </symbol>
                        <identifier> peek </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> KEYBOARD </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> key </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> char </keyword>
    <identifier> readChar </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> key </identifier>
      <symbol> , </symbol>
      <identifier> ch </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> key </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> key </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> key </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> Keyboard </identifier>
                                              <symbol> . </symbol>
                                              <identifier> keyPressed </identifier>
                                              <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </whileStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> ch </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> key </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ~ </symbol>          
                      <term>
                                <symbol> ( </symbol>
                                <expression>
                                            <term>
                                                            <identifier> key </identifier>
                                                          </term>
                                            <symbol> = </symbol>              
                                            <term>
                                                            <integerConstant> 0 </integerConstant>
                                                          </term>
                                            </expression>
                                <symbol> ) </symbol>
                                </term>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> key </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> Keyboard </identifier>
                                              <symbol> . </symbol>
                                              <identifier> keyPressed </identifier>
                                              <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </whileStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ~ </symbol>          
                      <term>
                                <symbol> ( </symbol>
                                <expression>
                                            <term>
                                                            <identifier> ch </identifier>
                                                          </term>
                                            <symbol> = </symbol>              
                                            <term>
                                                            <identifier> String </identifier>
                                                            <symbol> . </symbol>
                                                            <identifier> backSpace </identifier>
                                                            <symbol> ( </symbol>
                                                          <expressionList>
                                                          </expressionList>
                                                          <symbol> ) </symbol>
                                                          </term>
                                            </expression>
                                <symbol> ) </symbol>
                                </term>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <doStatement>
                        <keyword> do </keyword>
                        <identifier> Output </identifier>
                        <symbol> . </symbol>
                        <identifier> printChar </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> ch </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                        <symbol> ; </symbol>
                      </doStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> ch </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <identifier> String </identifier>
    <identifier> readLine </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <identifier> String </identifier>
        <identifier> message </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> char </keyword>
      <identifier> ch </identifier>
      <symbol> ; </symbol>
    </varDec>
  <varDec>
      <keyword> var </keyword>
      <identifier> String </identifier>
      <identifier> s </identifier>
      <symbol> ; </symbol>
    </varDec>
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> cursor </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> s </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> String </identifier>
                        <symbol> . </symbol>
                        <identifier> new </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> MAX_STRING </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> ch </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> cursor </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
        <expressionList>      
        <expression>
              <term>
                          <identifier> message </identifier>
                      </term>
              </expression>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ~ </symbol>          
                      <term>
                                <symbol> ( </symbol>
                                <expression>
                                            <term>
                                                            <identifier> ch </identifier>
                                                          </term>
                                            <symbol> = </symbol>              
                                            <term>
                                                            <identifier> String </identifier>
                                                            <symbol> . </symbol>
                                                            <identifier> newLine </identifier>
                                                            <symbol> ( </symbol>
                                                          <expressionList>
                                                          </expressionList>
                                                          <symbol> ) </symbol>
                                                          </term>
                                            </expression>
                                <symbol> ) </symbol>
                                </term>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> ch </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> Keyboard </identifier>
                                              <symbol> . </symbol>
                                              <identifier> readChar </identifier>
                                              <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              <ifStatement>
                        <keyword> if </keyword>
                        <symbol> ( </symbol>          
                      <expression>
                                <term>
                                            <symbol> ~ </symbol>              
                                            <term>
                                                          <symbol> ( </symbol>
                                                          <expression>
                                                                          <term>
                                                                                              <identifier> ch </identifier>
                                                                                            </term>
                                                                          <symbol> = </symbol>                  
                                                                          <term>
                                                                                              <identifier> String </identifier>
                                                                                              <symbol> . </symbol>
                                                                                              <identifier> backSpace </identifier>
                                                                                              <symbol> ( </symbol>
                                                                                            <expressionList>
                                                                                            </expressionList>
                                                                                            <symbol> ) </symbol>
                                                                                            </term>
                                                                          </expression>
                                                          <symbol> ) </symbol>
                                                          </term>
                                            </term>
                                <symbol> &amp; </symbol>            
                                <term>
                                            <symbol> ~ </symbol>              
                                            <term>
                                                          <symbol> ( </symbol>
                                                          <expression>
                                                                          <term>
                                                                                              <identifier> ch </identifier>
                                                                                            </term>
                                                                          <symbol> = </symbol>                  
                                                                          <term>
                                                                                              <identifier> String </identifier>
                                                                                              <symbol> . </symbol>
                                                                                              <identifier> newLine </identifier>
                                                                                              <symbol> ( </symbol>
                                                                                            <expressionList>
                                                                                            </expressionList>
                                                                                            <symbol> ) </symbol>
                                                                                            </term>
                                                                          </expression>
                                                          <symbol> ) </symbol>
                                                          </term>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                        <symbol> { </symbol>          
                      <statements>
                                <doStatement>
                                              <keyword> do </keyword>
                                              <identifier> s </identifier>
                                              <symbol> . </symbol>
                                              <identifier> appendChar </identifier>
                                              <symbol> ( </symbol>
                                            <expressionList>              
                                            <expression>
                                                          <term>
                                                                              <identifier> ch </identifier>
                                                                          </term>
                                                          </expression>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                              <symbol> ; </symbol>
                                            </doStatement>
                                <letStatement>
                                            <keyword> let </keyword>
                                              <identifier> cursor </identifier>
                                              <symbol> = </symbol>              
                                            <expression>
                                                          <term>
                                                                            <identifier> cursor </identifier>
                                                                          </term>
                                                          <symbol> + </symbol>                
                                                          <term>
                                                                            <integerConstant> 1 </integerConstant>
                                                                          </term>
                                                          </expression>
                                            <symbol> ; </symbol>
                                            </letStatement>
                                </statements>
                      <symbol> } </symbol>
                        <keyword> else </keyword>
                        <symbol> { </symbol>          
                      <statements>
                                <ifStatement>
                                              <keyword> if </keyword>
                                              <symbol> ( </symbol>              
                                            <expression>
                                                          <term>
                                                                          <symbol> ( </symbol>
                                                                          <expression>
                                                                                            <term>
                                                                                                                  <identifier> ch </identifier>
                                                                                                                </term>
                                                                                            <symbol> = </symbol>                    
                                                                                            <term>
                                                                                                                  <identifier> String </identifier>
                                                                                                                  <symbol> . </symbol>
                                                                                                                  <identifier> backSpace </identifier>
                                                                                                                  <symbol> ( </symbol>
                                                                                                                <expressionList>
                                                                                                                </expressionList>
                                                                                                                <symbol> ) </symbol>
                                                                                                                </term>
                                                                                            </expression>
                                                                          <symbol> ) </symbol>
                                                                          </term>
                                                          <symbol> &amp; </symbol>                
                                                          <term>
                                                                          <symbol> ( </symbol>
                                                                          <expression>
                                                                                            <term>
                                                                                                                  <identifier> cursor </identifier>
                                                                                                                </term>
                                                                                            <symbol> &gt; </symbol>                    
                                                                                            <term>
                                                                                                                  <integerConstant> 0 </integerConstant>
                                                                                                                </term>
                                                                                            </expression>
                                                                          <symbol> ) </symbol>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                              <symbol> { </symbol>              
                                            <statements>
                                                          <doStatement>
                                                                            <keyword> do </keyword>
                                                                            <identifier> s </identifier>
                                                                            <symbol> . </symbol>
                                                                            <identifier> eraseLastChar </identifier>
                                                                            <symbol> ( </symbol>
                                                                          <expressionList>
                                                                          </expressionList>
                                                                          <symbol> ) </symbol>
                                                                            <symbol> ; </symbol>
                                                                          </doStatement>
                                                          <doStatement>
                                                                            <keyword> do </keyword>
                                                                            <identifier> Output </identifier>
                                                                            <symbol> . </symbol>
                                                                            <identifier> backSpace </identifier>
                                                                            <symbol> ( </symbol>
                                                                          <expressionList>
                                                                          </expressionList>
                                                                          <symbol> ) </symbol>
                                                                            <symbol> ; </symbol>
                                                                          </doStatement>
                                                          <letStatement>
                                                                          <keyword> let </keyword>
                                                                            <identifier> cursor </identifier>
                                                                            <symbol> = </symbol>                  
                                                                          <expression>
                                                                                            <term>
                                                                                                                  <identifier> cursor </identifier>
                                                                                                                </term>
                                                                                            <symbol> - </symbol>                    
                                                                                            <term>
                                                                                                                  <integerConstant> 1 </integerConstant>
                                                                                                                </term>
                                                                                            </expression>
                                                                          <symbol> ; </symbol>
                                                                          </letStatement>
                                                          </statements>
                                            <symbol> } </symbol>
                                            </ifStatement>
                                </statements>
                      <symbol> } </symbol>
                      </ifStatement>
              </statements>
        <symbol> } </symbol>
        </whileStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> s </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> readInt </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <identifier> String </identifier>
        <identifier> message </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> temp </identifier>
      <symbol> ; </symbol>
    </varDec>
  <varDec>
      <keyword> var </keyword>
      <identifier> String </identifier>
      <identifier> s </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> s </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Keyboard </identifier>
                        <symbol> . </symbol>
                        <identifier> readLine </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> message </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> temp </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> s </identifier>
                        <symbol> . </symbol>
                        <identifier> intValue </identifier>
                        <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <doStatement>
          <keyword> do </keyword>
          <identifier> s </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> temp </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>