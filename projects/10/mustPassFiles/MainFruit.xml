<class>
    <keyword> class </keyword>
    <identifier> MainFruit </identifier>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> static </keyword>
        <identifier> Array </identifier>
        <identifier> fruits </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> arrayLength </identifier>
        <symbol> , </symbol>
        <identifier> bombsTaken </identifier>
        <symbol> , </symbol>
        <identifier> fruitsDropped </identifier>
        <symbol> , </symbol>
        <identifier> fruitsTaken </identifier>
        <symbol> , </symbol>
        <identifier> points </identifier>
        <symbol> , </symbol>
        <identifier> newFruitCounter </identifier>
        <symbol> , </symbol>
        <identifier> seed </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <identifier> String </identifier>
        <identifier> exitReason </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> MAX_ARRAY_SIZE </identifier>
        <symbol> , </symbol>
        <identifier> MAX_BOMBS_TAKEN </identifier>
        <symbol> , </symbol>
        <identifier> MAX_FRUITS_DROPPED </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> readInput </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> Fruit </identifier>
                <identifier> tempFruit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier> curr_key </identifier>
                <symbol> , </symbol>
                <identifier> that_letter </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> curr_key </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Keyboard </identifier>
                            <symbol> . </symbol>
                            <identifier> keyPressed </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Random </identifier>
                    <symbol> . </symbol>
                    <identifier> changeSeed </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> curr_key </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <identifier> arrayLength </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> tempFruit </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> fruits </identifier>
                                    <symbol> [ </symbol>
                                    <expression>
                                        <term>
                                            <identifier> i </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ] </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> that_letter </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> tempFruit </identifier>
                                    <symbol> . </symbol>
                                    <identifier> getLetter </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> that_letter </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <identifier> curr_key </identifier>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <ifStatement>
                                    <keyword> if </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> tempFruit </identifier>
                                            <symbol> . </symbol>
                                            <identifier> isBomb </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> bombsTaken </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> bombsTaken </identifier>
                                                </term>
                                                <symbol> + </symbol>
                                                <term>
                                                    <integerConstant> 1 </integerConstant>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> points </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> points </identifier>
                                                </term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <integerConstant> 300 </integerConstant>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                    <keyword> else </keyword>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> fruitsTaken </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> fruitsTaken </identifier>
                                                </term>
                                                <symbol> + </symbol>
                                                <term>
                                                    <integerConstant> 1 </integerConstant>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> points </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> points </identifier>
                                                </term>
                                                <symbol> + </symbol>
                                                <term>
                                                    <symbol> ( </symbol>
                                                    <expression>
                                                        <term>
                                                            <identifier> tempFruit </identifier>
                                                            <symbol> . </symbol>
                                                            <identifier> getLetter </identifier>
                                                            <symbol> ( </symbol>
                                                            <expressionList>
                                                            </expressionList>
                                                            <symbol> ) </symbol>
                                                        </term>
                                                        <symbol> - </symbol>
                                                        <term>
                                                            <integerConstant> 32 </integerConstant>
                                                        </term>
                                                    </expression>
                                                    <symbol> ) </symbol>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </ifStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> removeFruit </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> i </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <returnStatement>
                                    <keyword> return </keyword>
                                    <symbol> ; </symbol>
                                </returnStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawScreen </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> Fruit </identifier>
                <identifier> tempFruit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> dropped </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <identifier> mess </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 1 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> mess </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> Points:  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> mess </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> mess </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> points </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> mess </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  |  Bombs taken:  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> mess </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> mess </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> bombsTaken </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> mess </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  |  Fruits dropped:  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> mess </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> mess </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> fruitsDropped </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <identifier> arrayLength </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> tempFruit </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> fruits </identifier>
                                    <symbol> [ </symbol>
                                    <expression>
                                        <term>
                                            <identifier> i </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ] </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> dropped </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> tempFruit </identifier>
                                    <symbol> . </symbol>
                                    <identifier> draw </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> dropped </identifier>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <ifStatement>
                                    <keyword> if </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ~ </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> tempFruit </identifier>
                                                        <symbol> . </symbol>
                                                        <identifier> isBomb </identifier>
                                                        <symbol> ( </symbol>
                                                        <expressionList>
                                                        </expressionList>
                                                        <symbol> ) </symbol>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> fruitsDropped </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> fruitsDropped </identifier>
                                                </term>
                                                <symbol> + </symbol>
                                                <term>
                                                    <integerConstant> 1 </integerConstant>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </ifStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> removeFruit </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> i </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> boolean </keyword>
        <identifier> gameOver </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <identifier> output </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> char </keyword>
                <identifier> playAgain </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> playAgain </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 7 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 12 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> GAME OVER </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 8 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 12 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> exitReason </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 9 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 12 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> You had  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> points </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  points and caught  </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printInt </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> fruitsTaken </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant>  fruits. </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 10 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 12 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> Would you like to play again? Y/N </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <keyword> true </keyword>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> playAgain </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Keyboard </identifier>
                                    <symbol> . </symbol>
                                    <identifier> keyPressed </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> playAgain </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 89 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Sys </identifier>
                                    <symbol> . </symbol>
                                    <identifier> wait </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <integerConstant> 200 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <returnStatement>
                                    <keyword> return </keyword>
                                    <expression>
                                        <term>
                                            <keyword> true </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </returnStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> playAgain </identifier>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <integerConstant> 78 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <returnStatement>
                                    <keyword> return </keyword>
                                    <expression>
                                        <term>
                                            <keyword> false </keyword>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </returnStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <keyword> true </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> main </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> playAgain </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> wait </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> String </identifier>
                <identifier> output </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> playAgain </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <keyword> true </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> wait </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 150 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> playAgain </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Main </identifier>
                            <symbol> . </symbol>
                            <identifier> init </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <whileStatement>
                            <keyword> while </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> isContinue </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <ifStatement>
                                    <keyword> if </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> arrayLength </identifier>
                                                </term>
                                                <symbol> &lt; </symbol>
                                                <term>
                                                    <identifier> MAX_ARRAY_SIZE </identifier>
                                                </term>
                                            </expression>
                                            <symbol> ) </symbol>
                                        </term>
                                        <symbol> &amp; </symbol>
                                        <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> Random </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> mod </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                        <expression>
                                                            <term>
                                                                <identifier> newFruitCounter </identifier>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 4 </integerConstant>
                                                            </term>
                                                        </expression>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                                <symbol> = </symbol>
                                                <term>
                                                    <integerConstant> 0 </integerConstant>
                                                </term>
                                            </expression>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <doStatement>
                                            <keyword> do </keyword>
                                            <identifier> Main </identifier>
                                            <symbol> . </symbol>
                                            <identifier> addFruit </identifier>
                                            <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            <symbol> ; </symbol>
                                        </doStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </ifStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> readInput </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> drawScreen </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Sys </identifier>
                                    <symbol> . </symbol>
                                    <identifier> wait </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> wait </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <ifStatement>
                                    <keyword> if </keyword>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> wait </identifier>
                                        </term>
                                        <symbol> &gt; </symbol>
                                        <term>
                                            <integerConstant> 100 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                    <symbol> { </symbol>
                                    <statements>
                                        <letStatement>
                                            <keyword> let </keyword>
                                            <identifier> wait </identifier>
                                            <symbol> = </symbol>
                                            <expression>
                                                <term>
                                                    <integerConstant> 150 </integerConstant>
                                                </term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <identifier> Math </identifier>
                                                    <symbol> . </symbol>
                                                    <identifier> divide </identifier>
                                                    <symbol> ( </symbol>
                                                    <expressionList>
                                                        <expression>
                                                            <term>
                                                                <identifier> points </identifier>
                                                            </term>
                                                        </expression>
                                                        <symbol> , </symbol>
                                                        <expression>
                                                            <term>
                                                                <integerConstant> 130 </integerConstant>
                                                            </term>
                                                        </expression>
                                                    </expressionList>
                                                    <symbol> ) </symbol>
                                                </term>
                                            </expression>
                                            <symbol> ; </symbol>
                                        </letStatement>
                                    </statements>
                                    <symbol> } </symbol>
                                </ifStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> newFruitCounter </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> newFruitCounter </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </whileStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Main </identifier>
                            <symbol> . </symbol>
                            <identifier> drawScreen </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> playAgain </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> gameOver </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> exitReason </identifier>
                            <symbol> . </symbol>
                            <identifier> dispose </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <whileStatement>
                            <keyword> while </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> arrayLength </identifier>
                                </term>
                                <symbol> &gt; </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Main </identifier>
                                    <symbol> . </symbol>
                                    <identifier> removeFruit </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> arrayLength </identifier>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <integerConstant> 1 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </whileStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> clearScreen </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> moveCursor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 7 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 26 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> output </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <stringConstant> GOODBYE! </stringConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Output </identifier>
                    <symbol> . </symbol>
                    <identifier> printString </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> output </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> output </identifier>
                    <symbol> . </symbol>
                    <identifier> dispose </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
