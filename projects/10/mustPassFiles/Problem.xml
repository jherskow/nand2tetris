<class>
    <keyword> class </keyword>
    <identifier> Problem </identifier>
    <symbol> { </symbol>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> addFruit </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> fruits </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> arrayLength </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <identifier> Fruit </identifier>
                <identifier> newFruit </identifier>
                <symbol> , </symbol>
                <identifier> tempFruit </identifier>
                <symbol> ; </symbol>
            </varDec>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> newFruit </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Fruit </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <identifier> arrayLength </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> tempFruit </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> fruits </identifier>
                                    <symbol> [ </symbol>
                                    <expression>
                                        <term>
                                            <identifier> i </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ] </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> newFruit </identifier>
                                    <symbol> . </symbol>
                                    <identifier> getLetter </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                    <identifier> tempFruit </identifier>
                                    <symbol> . </symbol>
                                    <identifier> getLetter </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> newFruit </identifier>
                                    <symbol> . </symbol>
                                    <identifier> dispose </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                                <returnStatement>
                                    <keyword> return </keyword>
                                    <symbol> ; </symbol>
                                </returnStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> fruits </identifier>
                    <symbol> [ </symbol>
                    <expression>
                        <term>
                            <identifier> arrayLength </identifier>
                        </term>
                    </expression>
                    <symbol> ] </symbol>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> newFruit </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> arrayLength </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> arrayLength </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
