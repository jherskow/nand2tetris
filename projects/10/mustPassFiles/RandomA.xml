<class>
  <keyword> class </keyword>
  <identifier> Random </identifier>
  <symbol> { </symbol>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> seed </identifier>
  <symbol> ; </symbol>
</classVarDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> init </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> user_input </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> seed </identifier>
                      </term>
              <symbol> &lt; </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> seed </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                            <symbol> - </symbol>              
                                            <term>
                                                            <identifier> seed </identifier>
                                                          </term>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> seed </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> user_input </identifier>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 1000 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> get </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> seed </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> seed </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> seed </identifier>
                                            </term>
                                <symbol> &gt; </symbol>            
                                <term>
                                              <integerConstant> 20000 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              <symbol> | </symbol>        
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> seed </identifier>
                                            </term>
                                <symbol> &lt; </symbol>            
                                <term>
                                              <integerConstant> 0 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> seed </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 17 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> seed </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> changeSeed </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> change </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> seed </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> seed </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <identifier> change </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> seed </identifier>
                                            </term>
                                <symbol> &gt; </symbol>            
                                <term>
                                              <integerConstant> 20000 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              <symbol> | </symbol>        
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> seed </identifier>
                                            </term>
                                <symbol> &lt; </symbol>            
                                <term>
                                              <integerConstant> 0 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> seed </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> change </identifier>
                                            </term>
                                <symbol> + </symbol>            
                                <term>
                                              <integerConstant> 17 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> mod </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> a </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> b </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> div </identifier>
      <symbol> , </symbol>
      <identifier> mult </identifier>
      <symbol> , </symbol>
      <identifier> mod </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> div </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> divide </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> a </identifier>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <identifier> b </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> mult </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> multiply </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> b </identifier>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <identifier> div </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> mod </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> a </identifier>
                      </term>
              <symbol> - </symbol>        
              <term>
                        <identifier> mult </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> mod </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> getRadius </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> return_radius </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> return_radius </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 5 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> return_radius </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> return_radius </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <integerConstant> 20 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> return_radius </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> isBomb </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> isBomb </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> isBomb </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 5 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ~ </symbol>          
                      <term>
                                <symbol> ( </symbol>
                                <expression>
                                            <term>
                                                            <identifier> isBomb </identifier>
                                                          </term>
                                            <symbol> = </symbol>              
                                            <term>
                                                            <integerConstant> 0 </integerConstant>
                                                          </term>
                                            </expression>
                                <symbol> ) </symbol>
                                </term>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <returnStatement>
                        <keyword> return </keyword>          
                      <expression>
                                <term>
                                              <keyword> false </keyword>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </returnStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <keyword> true </keyword>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> isDirection </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> isDirection </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> isDirection </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 2 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ~ </symbol>          
                      <term>
                                <symbol> ( </symbol>
                                <expression>
                                            <term>
                                                            <identifier> isDirection </identifier>
                                                          </term>
                                            <symbol> = </symbol>              
                                            <term>
                                                            <integerConstant> 0 </integerConstant>
                                                          </term>
                                            </expression>
                                <symbol> ) </symbol>
                                </term>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <returnStatement>
                        <keyword> return </keyword>          
                      <expression>
                                <term>
                                              <keyword> false </keyword>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </returnStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <keyword> true </keyword>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> getFactor </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> factor </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> factor </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 4 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> factor </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> factor </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <integerConstant> 3 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> factor </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> factor </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 3 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> factor </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> getOffset </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> offset </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> offset </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 15 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> offset </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> offset </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <integerConstant> 15 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> offset </identifier>
                      </term>
              <symbol> = </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> offset </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <integerConstant> 16 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> offset </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> char </keyword>
    <identifier> getChar </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> char </keyword>
      <identifier> return_char </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> return_char </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Random </identifier>
                        <symbol> . </symbol>
                        <identifier> mod </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> Random </identifier>
                                                <symbol> . </symbol>
                                                <identifier> get </identifier>
                                                <symbol> ( </symbol>
                                            <expressionList>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 25 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> return_char </identifier>
                      </term>
              <symbol> &lt; </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> return_char </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                            <symbol> - </symbol>              
                                            <term>
                                                            <identifier> return_char </identifier>
                                                          </term>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> return_char </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> return_char </identifier>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <integerConstant> 65 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> return_char </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>