<class>
    <keyword> class </keyword>
    <identifier> Screen </identifier>
    <symbol> { </symbol>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> int </keyword>
        <identifier> SCREEN </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <keyword> boolean </keyword>
        <identifier> color </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <classVarDec>
        <keyword> static </keyword>
        <identifier> Array </identifier>
        <identifier> bitmask </identifier>
        <symbol> ; </symbol>
    </classVarDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> init </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> SCREEN </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 16384 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> color </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <keyword> true </keyword>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> initBitmaskArray </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> initBitmaskArray </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> cur </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> bitmask </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Array </identifier>
                            <symbol> . </symbol>
                            <identifier> new </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <integerConstant> 16 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> cur </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 1 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <integerConstant> 16 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> bitmask </identifier>
                            <symbol> [ </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                            </expression>
                            <symbol> ] </symbol>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> cur </identifier>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> cur </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> cur </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <identifier> cur </identifier>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> clearScreen </identifier>
        <symbol> ( </symbol>
        <parameterList>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> boolean </keyword>
                <identifier> temp </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> temp </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> color </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <keyword> false </keyword>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> drawRectangle </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 0 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 511 </integerConstant>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <integerConstant> 255 </integerConstant>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> setColor </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> temp </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> setColor </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> boolean </keyword>
            <identifier> b </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> color </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> b </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> int </keyword>
        <identifier> moduloPower2 </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> num </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> x </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <statements>
                <returnStatement>
                    <keyword> return </keyword>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> num </identifier>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> x </identifier>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawPixel </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> loc </identifier>
                <symbol> , </symbol>
                <identifier> temp </identifier>
                <symbol> , </symbol>
                <identifier> pixel </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> loc </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> SCREEN </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> y </identifier>
                                </term>
                                <symbol> * </symbol>
                                <term>
                                    <integerConstant> 32 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> x </identifier>
                                </term>
                                <symbol> / </symbol>
                                <term>
                                    <integerConstant> 16 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> pixel </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> moduloPower2 </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 16 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> temp </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Memory </identifier>
                            <symbol> . </symbol>
                            <identifier> peek </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> loc </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> color </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> temp </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> temp </identifier>
                                        </term>
                                        <symbol> | </symbol>
                                        <term>
                                            <identifier> bitmask </identifier>
                                            <symbol> [ </symbol>
                                            <expression>
                                                <term>
                                                    <identifier> pixel </identifier>
                                                </term>
                                            </expression>
                                            <symbol> ] </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> temp </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> temp </identifier>
                                        </term>
                                        <symbol> &amp; </symbol>
                                        <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                <term>
                                                    <symbol> ~ </symbol>
                                                    <term>
                                                        <identifier> bitmask </identifier>
                                                        <symbol> [ </symbol>
                                                        <expression>
                                                            <term>
                                                                <identifier> pixel </identifier>
                                                            </term>
                                                        </expression>
                                                        <symbol> ] </symbol>
                                                    </term>
                                                </term>
                                            </expression>
                                            <symbol> ) </symbol>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Memory </identifier>
                    <symbol> . </symbol>
                    <identifier> poke </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> loc </identifier>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <identifier> temp </identifier>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawLine </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x1 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y1 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> x2 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y2 </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> adyMinusbdx </identifier>
                <symbol> , </symbol>
                <identifier> a </identifier>
                <symbol> , </symbol>
                <identifier> b </identifier>
                <symbol> , </symbol>
                <identifier> dx </identifier>
                <symbol> , </symbol>
                <identifier> dy </identifier>
                <symbol> , </symbol>
                <identifier> x </identifier>
                <symbol> , </symbol>
                <identifier> y </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> adyMinusbdx </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> dx </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> x2 </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <identifier> x1 </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> dy </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> y2 </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <identifier> y1 </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> x </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> min </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x1 </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> x2 </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> y </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> min </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> y1 </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y2 </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> dx </identifier>
                                        </term>
                                        <symbol> &lt; </symbol>
                                        <term>
                                            <integerConstant> 0 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> dy </identifier>
                                        </term>
                                        <symbol> &gt; </symbol>
                                        <term>
                                            <integerConstant> 0 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> | </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> dx </identifier>
                                        </term>
                                        <symbol> &gt; </symbol>
                                        <term>
                                            <integerConstant> 0 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                                <symbol> &amp; </symbol>
                                <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                        <term>
                                            <identifier> dy </identifier>
                                        </term>
                                        <symbol> &lt; </symbol>
                                        <term>
                                            <integerConstant> 0 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> dy </identifier>
                                </term>
                                <symbol> &lt; </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Screen </identifier>
                                    <symbol> . </symbol>
                                    <identifier> drawDiagonalLine </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> x1 </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> y1 </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> dx </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> dy </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <doStatement>
                                    <keyword> do </keyword>
                                    <identifier> Screen </identifier>
                                    <symbol> . </symbol>
                                    <identifier> drawDiagonalLine </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> x2 </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <identifier> y2 </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <identifier> dx </identifier>
                                                </term>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <symbol> - </symbol>
                                                <term>
                                                    <identifier> dy </identifier>
                                                </term>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                    <symbol> ; </symbol>
                                </doStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                        <returnStatement>
                            <keyword> return </keyword>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> dx </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Math </identifier>
                                    <symbol> . </symbol>
                                    <identifier> abs </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> dx </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> dy </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Math </identifier>
                                    <symbol> . </symbol>
                                    <identifier> abs </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> dy </identifier>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> dy </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawVerticalLineOptimized </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dx </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <returnStatement>
                            <keyword> return </keyword>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> dx </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawHorizontalLine </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dy </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <returnStatement>
                            <keyword> return </keyword>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier> a </identifier>
                                            </term>
                                            <symbol> &gt; </symbol>
                                            <term>
                                                <identifier> dx </identifier>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> &amp; </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier> b </identifier>
                                            </term>
                                            <symbol> &gt; </symbol>
                                            <term>
                                                <identifier> dy </identifier>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawPixel </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> a </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> b </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> adyMinusbdx </identifier>
                                </term>
                                <symbol> &lt; </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> a </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> a </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> adyMinusbdx </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> adyMinusbdx </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <identifier> dy </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> b </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> b </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> adyMinusbdx </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> adyMinusbdx </identifier>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                            <identifier> dx </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawDiagonalLine </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dx </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dy </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> adyMinusbdx </identifier>
                <symbol> , </symbol>
                <identifier> a </identifier>
                <symbol> , </symbol>
                <identifier> b </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> adyMinusbdx </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> a </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> b </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier> a </identifier>
                                            </term>
                                            <symbol> &gt; </symbol>
                                            <term>
                                                <identifier> dx </identifier>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> &amp; </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <symbol> ~ </symbol>
                                    <term>
                                        <symbol> ( </symbol>
                                        <expression>
                                            <term>
                                                <identifier> b </identifier>
                                            </term>
                                            <symbol> &lt; </symbol>
                                            <term>
                                                <identifier> dy </identifier>
                                            </term>
                                        </expression>
                                        <symbol> ) </symbol>
                                    </term>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawPixel </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> a </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> b </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <ifStatement>
                            <keyword> if </keyword>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> adyMinusbdx </identifier>
                                </term>
                                <symbol> &lt; </symbol>
                                <term>
                                    <integerConstant> 0 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> b </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> b </identifier>
                                        </term>
                                        <symbol> - </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> adyMinusbdx </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> adyMinusbdx </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <identifier> dx </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                            <keyword> else </keyword>
                            <symbol> { </symbol>
                            <statements>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> a </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> a </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <integerConstant> 1 </integerConstant>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                                <letStatement>
                                    <keyword> let </keyword>
                                    <identifier> adyMinusbdx </identifier>
                                    <symbol> = </symbol>
                                    <expression>
                                        <term>
                                            <identifier> adyMinusbdx </identifier>
                                        </term>
                                        <symbol> + </symbol>
                                        <term>
                                            <identifier> dy </identifier>
                                        </term>
                                    </expression>
                                    <symbol> ; </symbol>
                                </letStatement>
                            </statements>
                            <symbol> } </symbol>
                        </ifStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawHorizontalLine </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dy </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                    <symbol> &gt; </symbol>
                                    <term>
                                        <identifier> dy </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawPixel </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawVerticalLineOptimized </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dx </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> bulkedSize </identifier>
                <symbol> , </symbol>
                <identifier> address </identifier>
                <symbol> , </symbol>
                <identifier> bulkedStart </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <ifStatement>
                    <keyword> if </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> dx </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <integerConstant> 16 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawVerticalLine </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dx </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <returnStatement>
                            <keyword> return </keyword>
                            <symbol> ; </symbol>
                        </returnStatement>
                    </statements>
                    <symbol> } </symbol>
                </ifStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> bulkedStart </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> x </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> moduloPower2 </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <integerConstant> 16 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <integerConstant> 16 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> address </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> SCREEN </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> y </identifier>
                                </term>
                                <symbol> * </symbol>
                                <term>
                                    <integerConstant> 32 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> + </symbol>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> bulkedStart </identifier>
                                </term>
                                <symbol> / </symbol>
                                <term>
                                    <integerConstant> 16 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> bulkedSize </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> ( </symbol>
                            <expression>
                                <term>
                                    <identifier> dx </identifier>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                    <identifier> Screen </identifier>
                                    <symbol> . </symbol>
                                    <identifier> moduloPower2 </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> dx </identifier>
                                            </term>
                                        </expression>
                                        <symbol> , </symbol>
                                        <expression>
                                            <term>
                                                <integerConstant> 16 </integerConstant>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ) </symbol>
                        </term>
                        <symbol> - </symbol>
                        <term>
                            <integerConstant> 16 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> drawVerticalLine </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> x </identifier>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <identifier> y </identifier>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> bulkedStart </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <identifier> bulkedSize </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Memory </identifier>
                            <symbol> . </symbol>
                            <identifier> poke </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> address </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> color </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> address </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> address </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 16 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <doStatement>
                    <keyword> do </keyword>
                    <identifier> Screen </identifier>
                    <symbol> . </symbol>
                    <identifier> drawVerticalLine </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                        <expression>
                            <term>
                                <identifier> x </identifier>
                            </term>
                            <symbol> + </symbol>
                            <term>
                                <identifier> bulkedSize </identifier>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <identifier> y </identifier>
                            </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> dx </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> bulkedSize </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                    <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawVerticalLine </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> dx </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <integerConstant> 0 </integerConstant>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                    <symbol> &gt; </symbol>
                                    <term>
                                        <identifier> dx </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawPixel </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawRectangle </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> x1 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y1 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> x2 </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> y2 </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> i </identifier>
                <symbol> , </symbol>
                <identifier> dx </identifier>
                <symbol> , </symbol>
                <identifier> dy </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> dx </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> abs </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x2 </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> x1 </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> dy </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> abs </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> y2 </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> y1 </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <identifier> i </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                            <identifier> dy </identifier>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawVerticalLineOptimized </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> x1 </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> y1 </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> i </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> dx </identifier>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> i </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> i </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <subroutineDec>
        <keyword> function </keyword>
        <keyword> void </keyword>
        <identifier> drawCircle </identifier>
        <symbol> ( </symbol>
        <parameterList>
            <keyword> int </keyword>
            <identifier> cx </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> cy </identifier>
            <symbol> , </symbol>
            <keyword> int </keyword>
            <identifier> r </identifier>
        </parameterList>
        <symbol> ) </symbol>
        <subroutineBody>
            <symbol> { </symbol>
            <varDec>
                <keyword> var </keyword>
                <keyword> int </keyword>
                <identifier> dy </identifier>
                <symbol> , </symbol>
                <identifier> temp </identifier>
                <symbol> , </symbol>
                <identifier> rsqrt </identifier>
                <symbol> ; </symbol>
            </varDec>
            <statements>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> dy </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <symbol> - </symbol>
                            <term>
                                <identifier> r </identifier>
                            </term>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                    <keyword> let </keyword>
                    <identifier> rsqrt </identifier>
                    <symbol> = </symbol>
                    <expression>
                        <term>
                            <identifier> r </identifier>
                        </term>
                        <symbol> * </symbol>
                        <term>
                            <identifier> r </identifier>
                        </term>
                    </expression>
                    <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                    <keyword> while </keyword>
                    <symbol> ( </symbol>
                    <expression>
                        <term>
                            <symbol> ~ </symbol>
                            <term>
                                <symbol> ( </symbol>
                                <expression>
                                    <term>
                                        <identifier> dy </identifier>
                                    </term>
                                    <symbol> &gt; </symbol>
                                    <term>
                                        <identifier> r </identifier>
                                    </term>
                                </expression>
                                <symbol> ) </symbol>
                            </term>
                        </term>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> temp </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> Math </identifier>
                                    <symbol> . </symbol>
                                    <identifier> sqrt </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                        <expression>
                                            <term>
                                                <identifier> rsqrt </identifier>
                                            </term>
                                            <symbol> - </symbol>
                                            <term>
                                                <symbol> ( </symbol>
                                                <expression>
                                                    <term>
                                                        <identifier> dy </identifier>
                                                    </term>
                                                    <symbol> * </symbol>
                                                    <term>
                                                        <identifier> dy </identifier>
                                                    </term>
                                                </expression>
                                                <symbol> ) </symbol>
                                            </term>
                                        </expression>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                            <keyword> do </keyword>
                            <identifier> Screen </identifier>
                            <symbol> . </symbol>
                            <identifier> drawVerticalLineOptimized </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                                <expression>
                                    <term>
                                        <identifier> cx </identifier>
                                    </term>
                                    <symbol> - </symbol>
                                    <term>
                                        <identifier> temp </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> cy </identifier>
                                    </term>
                                    <symbol> + </symbol>
                                    <term>
                                        <identifier> dy </identifier>
                                    </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                    <term>
                                        <identifier> temp </identifier>
                                    </term>
                                    <symbol> * </symbol>
                                    <term>
                                        <integerConstant> 2 </integerConstant>
                                    </term>
                                </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                            <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                            <keyword> let </keyword>
                            <identifier> dy </identifier>
                            <symbol> = </symbol>
                            <expression>
                                <term>
                                    <identifier> dy </identifier>
                                </term>
                                <symbol> + </symbol>
                                <term>
                                    <integerConstant> 1 </integerConstant>
                                </term>
                            </expression>
                            <symbol> ; </symbol>
                        </letStatement>
                    </statements>
                    <symbol> } </symbol>
                </whileStatement>
                <returnStatement>
                    <keyword> return </keyword>
                    <symbol> ; </symbol>
                </returnStatement>
            </statements>
            <symbol> } </symbol>
        </subroutineBody>
    </subroutineDec>
    <symbol> } </symbol>
</class>
