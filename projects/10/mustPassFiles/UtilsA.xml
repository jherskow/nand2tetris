<class>
  <keyword> class </keyword>
  <identifier> Utils </identifier>
  <symbol> { </symbol>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> _lastNum </identifier>
  <symbol> ; </symbol>
</classVarDec>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> PSEUDA_RAND_MULTIPLIER </identifier>
  <symbol> ; </symbol>
</classVarDec>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> PSEUDA_RAND_ADDER </identifier>
  <symbol> ; </symbol>
</classVarDec>
<classVarDec>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <identifier> MAX_DIST </identifier>
  <symbol> ; </symbol>
</classVarDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> initRandomSeed </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> seed </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> _lastNum </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> seed </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> PSEUDA_RAND_MULTIPLIER </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 91 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> PSEUDA_RAND_ADDER </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> MAX_DIST </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <integerConstant> 16354 </integerConstant>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> random </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> limit </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> res </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> res </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Utils </identifier>
                        <symbol> . </symbol>
                        <identifier> modulo </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> _lastNum </identifier>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <identifier> limit </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> _lastNum </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> _lastNum </identifier>
                                            </term>
                                <symbol> * </symbol>            
                                <term>
                                              <identifier> PSEUDA_RAND_MULTIPLIER </identifier>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              <symbol> + </symbol>        
              <term>
                        <identifier> PSEUDA_RAND_ADDER </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> _lastNum </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Utils </identifier>
                        <symbol> . </symbol>
                        <identifier> moduloPower2 </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> _lastNum </identifier>
                                            </term>
                                </expression>
                      <symbol> , </symbol>          
                      <expression>
                                <term>
                                                <integerConstant> 1024 </integerConstant>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> res </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> isBound </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> num </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> a </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> b </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                          <term>
                                                                          <symbol> ~ </symbol>                  
                                                                          <term>
                                                                                            <symbol> ( </symbol>
                                                                                            <expression>
                                                                                                                <term>
                                                                                                                                        <identifier> num </identifier>
                                                                                                                                      </term>
                                                                                                                <symbol> &lt; </symbol>                      
                                                                                                                <term>
                                                                                                                                        <identifier> a </identifier>
                                                                                                                                      </term>
                                                                                                                </expression>
                                                                                            <symbol> ) </symbol>
                                                                                            </term>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                            </term>
                                <symbol> &amp; </symbol>            
                                <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                          <term>
                                                                          <symbol> ~ </symbol>                  
                                                                          <term>
                                                                                            <symbol> ( </symbol>
                                                                                            <expression>
                                                                                                                <term>
                                                                                                                                        <identifier> num </identifier>
                                                                                                                                      </term>
                                                                                                                <symbol> &gt; </symbol>                      
                                                                                                                <term>
                                                                                                                                        <identifier> b </identifier>
                                                                                                                                      </term>
                                                                                                                </expression>
                                                                                            <symbol> ) </symbol>
                                                                                            </term>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> getLastNum </identifier>
    <symbol> ( </symbol>
  <parameterList>
    </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> _lastNum </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> modulo </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> num </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> x </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> res </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                            <symbol> ~ </symbol>              
                                            <term>
                                                          <symbol> ( </symbol>
                                                          <expression>
                                                                          <term>
                                                                                              <identifier> num </identifier>
                                                                                            </term>
                                                                          <symbol> &gt; </symbol>                  
                                                                          <term>
                                                                                              <identifier> x </identifier>
                                                                                            </term>
                                                                          </expression>
                                                          <symbol> ) </symbol>
                                                          </term>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              <symbol> | </symbol>        
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> x </identifier>
                                            </term>
                                <symbol> = </symbol>            
                                <term>
                                              <integerConstant> 0 </integerConstant>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> res </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> num </identifier>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> res </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> num </identifier>
                                            </term>
                                <symbol> - </symbol>            
                                <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                          <term>
                                                                            <identifier> x </identifier>
                                                                          </term>
                                                          <symbol> * </symbol>                
                                                          <term>
                                                                            <identifier> Math </identifier>
                                                                            <symbol> . </symbol>
                                                                            <identifier> divide </identifier>
                                                                            <symbol> ( </symbol>
                                                                          <expressionList>                  
                                                                          <expression>
                                                                                            <term>
                                                                                                                    <identifier> num </identifier>
                                                                                                                </term>
                                                                                            </expression>
                                                                          <symbol> , </symbol>                  
                                                                          <expression>
                                                                                            <term>
                                                                                                                    <identifier> x </identifier>
                                                                                                                </term>
                                                                                            </expression>
                                                                          </expressionList>
                                                                          <symbol> ) </symbol>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> res </identifier>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> moduloPower2 </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> num </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> x </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <statements>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                              <identifier> num </identifier>
                                            </term>
                                <symbol> &amp; </symbol>            
                                <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                          <term>
                                                                            <identifier> x </identifier>
                                                                          </term>
                                                          <symbol> - </symbol>                
                                                          <term>
                                                                            <integerConstant> 1 </integerConstant>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
<subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> distance </identifier>
    <symbol> ( </symbol>    
  <parameterList>
        <keyword> int </keyword>
        <identifier> x1 </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> y1 </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> x2 </identifier>
        <symbol> , </symbol>
        <keyword> int </keyword>
        <identifier> y2 </identifier>
      </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
  <symbol> { </symbol>  
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> gapX </identifier>
      <symbol> ; </symbol>
    </varDec>
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> gapY </identifier>
      <symbol> ; </symbol>
    </varDec>
  <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> dist </identifier>
      <symbol> ; </symbol>
    </varDec>
  <statements>
    <letStatement>
        <keyword> let </keyword>
          <identifier> gapX </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> abs </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> x1 </identifier>
                                            </term>
                                <symbol> - </symbol>            
                                <term>
                                                <identifier> x2 </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> gapY </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> abs </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> y1 </identifier>
                                            </term>
                                <symbol> - </symbol>            
                                <term>
                                                <identifier> y2 </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <letStatement>
        <keyword> let </keyword>
          <identifier> dist </identifier>
          <symbol> = </symbol>      
        <expression>
              <term>
                      <symbol> ( </symbol>
                      <expression>
                                <term>
                                            <symbol> ( </symbol>
                                            <expression>
                                                          <term>
                                                                            <identifier> Math </identifier>
                                                                            <symbol> . </symbol>
                                                                            <identifier> multiply </identifier>
                                                                            <symbol> ( </symbol>
                                                                          <expressionList>                  
                                                                          <expression>
                                                                                            <term>
                                                                                                                    <identifier> gapX </identifier>
                                                                                                                </term>
                                                                                            </expression>
                                                                          <symbol> , </symbol>                  
                                                                          <expression>
                                                                                            <term>
                                                                                                                    <identifier> gapX </identifier>
                                                                                                                </term>
                                                                                            </expression>
                                                                          </expressionList>
                                                                          <symbol> ) </symbol>
                                                                          </term>
                                                          </expression>
                                            <symbol> ) </symbol>
                                            </term>
                                <symbol> + </symbol>            
                                <term>
                                              <identifier> Math </identifier>
                                              <symbol> . </symbol>
                                              <identifier> multiply </identifier>
                                              <symbol> ( </symbol>
                                            <expressionList>              
                                            <expression>
                                                          <term>
                                                                              <identifier> gapY </identifier>
                                                                          </term>
                                                          </expression>
                                            <symbol> , </symbol>              
                                            <expression>
                                                          <term>
                                                                              <identifier> gapY </identifier>
                                                                          </term>
                                                          </expression>
                                            </expressionList>
                                            <symbol> ) </symbol>
                                            </term>
                                </expression>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </letStatement>
    <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>      
        <expression>
              <term>
                        <identifier> dist </identifier>
                      </term>
              <symbol> &lt; </symbol>        
              <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
              </expression>
        <symbol> ) </symbol>
          <symbol> { </symbol>      
        <statements>
              <letStatement>
                      <keyword> let </keyword>
                        <identifier> dist </identifier>
                        <symbol> = </symbol>          
                      <expression>
                                <term>
                                              <identifier> MAX_DIST </identifier>
                                            </term>
                                </expression>
                      <symbol> ; </symbol>
                      </letStatement>
              </statements>
        <symbol> } </symbol>
        </ifStatement>
    <returnStatement>
          <keyword> return </keyword>      
        <expression>
              <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> sqrt </identifier>
                        <symbol> ( </symbol>
                      <expressionList>          
                      <expression>
                                <term>
                                                <identifier> dist </identifier>
                                            </term>
                                </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      </term>
              </expression>
        <symbol> ; </symbol>
        </returnStatement>
    </statements>
  <symbol> } </symbol>
  </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>