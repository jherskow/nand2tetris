// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList;
    static Array memory;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 2;
        let freeList[1] = 2050;
        let freeList[2] = 14333;
        let freeList[3] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, l;
        let block = freeList[1];
        let l = freeList;
        if(block =null){
            return -1;
        }
        while(~(block = null)){
            if (block[0] > size){
                if (block[0] - size < 3){
                    let l[1] = block[1];
                }
                else {
                    let l[1] = l[1]+size+1;
                    let memory[l[1]] = block[0]  - size-1;
                    let memory[l[1]+1] = block[1];
                    let block[0] = size + 1;
                }
                return block+1;
            }
            else{
                let block = block[1];
                let l = l[1];
            }
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        var int next;
        let next = freeList[1];
        let freeList[1] = object-1;
        let object[0] = next;
        return;
    }
}