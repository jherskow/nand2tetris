// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean curColor;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        let screen = 16384;
        do setColor(true);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (y*32) + (x/16);


        if( curColor ) {
            let screen[address] = screen[address] | twoToThe[x&15];
        }
        else {
            let screen[address] = screen[address] & (~twoToThe[x&15]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a , aPos, bPos,b , adyMinusbdx, ver, hor,dx, dy , minX, minY;
        let dy = Math.abs(y1-y2);
        let dx = Math.abs(x1-x2);
        let minX = Math.min(x1,x2);
        let minY = Math.min(y1,y2);
        if (x1 > x2) {
            let hor = -1;
        } else {
            let hor = 1;
        }
        if (y1 > y2) {
            let ver = -1;
        } else {
            let ver = 1;
        }

        while(~(aPos>dx) & ~(bPos>dy)){

            if( (dy=0) | (dx=0)){
                if(dy=0){
                    do drawPixel( minX + aPos , y1);
                    let aPos = aPos + 1;
                }
                if(dx=0){
                    do drawPixel( x1 ,minY + bPos);
                    let bPos = bPos + 1;
                }
            }
            else{
                do drawPixel( x1+a ,y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + hor;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + ver;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
                let aPos = Math.abs(a);
                let bPos = Math.abs(b);
            }

        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1+ 1;
        }
        return;
}

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;
        while( ~(dy > r) ) {
            let dx = Math.sqrt((r*r) -(dy*dy));
            do drawLine( x-dx, y+dy,x+dx, y+dy );
            let dy = dy + 1;
        }
        return;
    }
}
